# .github/workflows/setup_repo.yml
name: Setup Repository Structure and Workflows

on:
  workflow_dispatch: # This allows manual triggering from GitHub Actions UI

jobs:
  setup:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }} # Required to push changes

      - name: Log Setup Start
        run: |
          echo "$(date +"%Y-%m-%d %H:%M:%S") - Starting repository setup." >> setup_log.txt
          git config user.name "github-actions"
          git config user.email "actions@github.com"
          git add setup_log.txt || true # Add log if it exists, ignore if not
          git commit -m "Setup: Initial setup log." || true
          git push || true

      - name: Create Base Folders
        run: |
          echo "Creating core directories..."
          mkdir -p conversation/csv
          mkdir -p conversation/Logs
          mkdir -p conversation/Ready
          mkdir -p conversation/Temp
          echo "$(date +"%Y-%m-%d %H:%M:%S") - Core folders created." >> setup_log.txt

      - name: Create requirements.txt
        run: |
          echo "Creating requirements.txt..."
          echo -e "pandas\nopenpyxl\nsqlite-utils" > requirements.txt
          echo "$(date +"%Y-%m-%d %H:%M:%S") - requirements.txt created." >> setup_log.txt

      - name: Create initial workflow_activity.log
        run: |
          echo "Creating initial workflow_activity.log..."
          touch conversation/Logs/workflow_activity.log # Create an empty log file
          echo "$(date +"%Y-%m-%d %H:%M:%S") - Initial workflow_activity.log created." >> setup_log.txt

      - name: Create Workflow Files
        run: |
          echo "Creating individual workflow YAML files..."
          mkdir -p .github/workflows

          # Workflow 1: check_and_initial_merge.yml
          cat << 'EOF' > .github/workflows/check_and_initial_merge.yml
# .github/workflows/check_and_initial_merge.yml
name: Check Files and Initial Merge

on:
  push:
    paths:
      - 'conversation/csv/scanning.xlsx'
      - 'conversation/csv/prices.xlsx'

jobs:
  initial_merge:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository and ensure latest
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Cache Python dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install Required Python Packages
        run: pip install -r requirements.txt

      - name: Verify both actual data files exist
        id: check_files
        run: |
          SCANNING_FILE="conversation/csv/scanning.xlsx"
          PRICES_FILE="conversation/csv/prices.xlsx"
          
          if [ -f "$SCANNING_FILE" ] && [ -f "$PRICES_FILE" ]; then
            echo "Both scanning.xlsx and prices.xlsx found. Proceeding with initial merge."
            echo "both_files_exist=true" >> "$GITHUB_OUTPUT"
          else
            echo "One or both Excel files missing. Skipping initial merge for now."
            echo "both_files_exist=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Run Initial Merge and Create version.txt
        if: steps.check_files.outputs.both_files_exist == 'true'
        run: |
          python3 <<'PYEOF'
          import pandas as pd
          import os
          from datetime import datetime
          import sys
          import traceback
          import math

          try:
              scan_file = "conversation/csv/scanning.xlsx"
              price_file = "conversation/csv/prices.xlsx"
                      
              os.makedirs("conversation/Temp", exist_ok=True)
              log_path = "conversation/Logs/workflow_activity.log"

              with open(log_path, "a") as logfile:
                  now = datetime.now().strftime("[%Y-%m-%d %H:%M:%S]")
                  logfile.write(f"{now} Both files received. Starting initial merge.\n")

              scan_df = pd.read_excel(scan_file)
              price_df = pd.read_excel(price_file)

              price_df["OriginalPrice"] = pd.to_numeric(price_df["OriginalPrice"], errors='coerce')
              price_df = price_df[["Barcode", "OriginalPrice"]]

              merged_df = pd.merge(scan_df, price_df, on="Barcode", how="left")

              def format_price(price):
                  if pd.isna(price):
                      return ''
                  elif isinstance(price, (int, float)) and price == int(price):
                      return str(int(price))
                  else:
                      return str(price)

              merged_df["OriginalPrice"] = merged_df["OriginalPrice"].apply(format_price)

              final_columns = ["Barcode", "Article", "Percentage", "OriginalPrice"]
              merged_df = merged_df[final_columns]

              merged_csv_path = "conversation/Temp/merging_temp.csv"
              merged_df.to_csv(merged_csv_path, index=False)

              version_file_path = "conversation/Temp/version.txt"
              timestamp_for_version = datetime.now().strftime("DB_Version_%Y%m%d_%H%M%S")
              with open(version_file_path, 'w') as f:
                  f.write(timestamp_for_version + "\n")
                      
              with open(log_path, "a") as logfile:
                  now = datetime.now().strftime("[%Y-%m-%d %H:%M:%S]")
                  logfile.write(f"{now} Merging complete. {os.path.basename(merged_csv_path)} created. Version marker file ({os.path.basename(version_file_path)}) created with content: {timestamp_for_version}.\n")

          except Exception as e:
              log_path_error = "conversation/Logs/workflow_activity.log"
              with open(log_path_error, "a") as logfile:
                  now = datetime.now().strftime("[%Y-%m-%d %H:%M:%S]")
                  logfile.write(f"{now} ERROR: Initial Merge Failed: {str(e)}\n")
                  logfile.write(traceback.format_exc())
              sys.exit(1)
          PYEOF
        env:        
          PYTHONUNBUFFERED: 1        
        
      - name: Commit and Push All Generated Files        
        if: steps.check_files.outputs.both_files_exist == 'true'        
        env:        
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}        
        run: |        
          git config user.name "github-actions"        
          git config user.email "actions@github.com"        
                  
          git add conversation/Temp/merging_temp.csv        
          git add conversation/Temp/version.txt        
          git add conversation/Logs/workflow_activity.log        
                  
          if git diff --staged --quiet; then        
              echo "No changes to commit from this step."        
          else        
              git commit -m "Initial Merge: Created merging_temp.csv, version.txt, and updated logs."        
          fi        
                  
          git push --force
EOF

          # Workflow 2: final_conversion_workflow.yml
          cat << 'EOF' > .github/workflows/final_conversion_workflow.yml
# .github/workflows/final_conversion_workflow.yml
name: Final Conversion Workflow

on:
  push:
    paths:
      - 'conversation/Temp/version.txt'

jobs:
  run_final_conversion:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository and ensure latest
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Cache Python dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install Required Python Packages
        run: pip install -r requirements.txt

      - name: Log Final Conversion Workflow Start
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          mkdir -p conversation/Logs
          LOG_FILE="conversation/Logs/workflow_activity.log"
          echo "$(date +"%Y-%m-%d %H:%M:%S") - Final conversion workflow triggered by version.txt." >> "$LOG_FILE"
          git config user.name "github-actions"
          git config user.email "actions@github.com"
          git add "$LOG_FILE"
          git pull --rebase origin main || true
          
          if ! git diff --staged --quiet; then
              git commit -m "Log: Final workflow triggered."
          else
              echo "No new log entry commit from final workflow trigger."
          fi
          
          git push --force-with-lease || echo "Log push failed for final workflow trigger."

      - name: Verify merging_temp.csv and version.txt exist
        id: check_files
        run: |
          MERGED_CSV="conversation/Temp/merging_temp.csv"
          VERSION_FILE="conversation/Temp/version.txt"
          if [ ! -f "$MERGED_CSV" ]; then
            echo "Error: merging_temp.csv not found. Aborting final conversion."
            exit 1
          fi
          if [ ! -f "$VERSION_FILE" ]; then
            echo "Error: version.txt not found. Aborting final conversion."
            exit 1
          fi
          echo "Both merging_temp.csv and version.txt found. Proceeding with final conversion."
          echo "files_exist=true" >> "$GITHUB_OUTPUT"

      - name: Run Final Conversion (CSV to DB, Zip)
        if: steps.check_files.outputs.files_exist == 'true'
        run: |
          python3 <<'PYEOF'
          import pandas as pd
          import sqlite3
          import os
          from datetime import datetime
          import zipfile
          import traceback
          import sys

          try:
              merged_csv_path = "conversation/Temp/merging_temp.csv"
              version_file_path = "conversation/Temp/version.txt"
              log_path = "conversation/Logs/workflow_activity.log"
                      
              os.makedirs("conversation/Ready", exist_ok=True)
              os.makedirs("conversation/Logs", exist_ok=True)
        
              with open(version_file_path, 'r') as f:
                  version_name = f.read().strip()
        
              with open(log_path, "a") as logfile:
                  now = datetime.now().strftime("[%Y-%m-%d %H:%M:%S]")
                  logfile.write(f"{now} Final Conversion Started for version: {version_name}.\n")
        
              merged_df = pd.read_csv(merged_csv_path)
        
              db_target = f"conversation/Ready/{version_name}.db"
              conn = sqlite3.connect(db_target)
              merged_df.to_sql("sc", conn, if_exists="replace", index=False, dtype={'OriginalPrice': 'TEXT'})
              conn.commit()
              conn.execute("VACUUM;")
              conn.close()
        
              with sqlite3.connect(db_target) as conn:
                  conn.execute("CREATE TABLE IF NOT EXISTS databaseversion (DBversion TEXT)")
                  conn.execute("DELETE FROM databaseversion")
                  conn.execute("INSERT INTO databaseversion (DBversion) VALUES (?)", (version_name,))
                  conn.commit()
                  conn.execute("VACUUM;")
        
              zip_name = f"conversation/Ready/{version_name}.zip"
              with zipfile.ZipFile(zip_name, 'w', zipfile.ZIP_DEFLATED) as zipf:
                  zipf.write(db_target, os.path.basename(db_target))
        
              os.remove(db_target)
        
              with open(log_path, "a") as logfile:
                  now = datetime.now().strftime("[%Y-%m-%d %H:%M:%S]")
                  logfile.write(f"{now} DB conversion and zipping complete. Final ZIP created: {os.path.basename(zip_name)}.\n")
                  logfile.write(f"{now} Workflow Finished.\n")
        
              # Reset the log file by truncating it
              with open(log_path, "w") as logfile:
                  logfile.write("")
              
          except Exception as e:        
              log_path_error = "conversation/Logs/workflow_activity.log"        
              with open(log_path_error, "a") as logfile:        
                  now = datetime.now().strftime("[%Y-%m-%d %H:%M:%S]")        
                  logfile.write(f"{now} ERROR: Final Conversion Failed: {str(e)}\n")        
                  logfile.write(traceback.format_exc())        
              sys.exit(1)
          PYEOF
        env:        
          PYTHONUNBUFFERED: 1        
        
      - name: Clean Up All Source and Temp Files, and Commit Finalized        
        if: steps.check_files.outputs.files_exist == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config user.name "github-actions"
          git config user.email "actions@github.com"
                  
          git add conversation/Ready/*.zip
          git add conversation/Logs/workflow_activity.log
                  
          git rm conversation/csv/scanning.xlsx || true
          git rm conversation/csv/prices.xlsx || true
          git rm conversation/Temp/merging_temp.csv || true
          git rm conversation/Temp/version.txt || true
                  
          if git diff --staged --quiet; then        
              echo "No changes to commit from this final step."        
          else        
              git commit -m "Finalized: Created ZIP, cleaned up source and temporary files, and reset log."        
          fi        
          git push --force
EOF

          # Workflow 3: on_prices_upload.yml
          cat << 'EOF' > .github/workflows/on_prices_upload.yml
# .github/workflows/on_prices_upload.yml
name: On Prices File Upload - Log Received

on:
  push:
    paths:
      - 'conversation/csv/prices.xlsx'

jobs:
  log_received:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Cache Python dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install Required Python Packages
        run: pip install -r requirements.txt

      - name: Log Prices.xlsx File Received
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          mkdir -p conversation/Logs
          LOG_FILE="conversation/Logs/workflow_activity.log"
          echo "$(date +"%Y-%m-%d %H:%M:%S") - Prices.xlsx file received." >> "$LOG_FILE"
          git config user.name "github-actions"
          git config user.email "actions@github.com"
          git add "$LOG_FILE"
          git pull --rebase origin main || true
          
          if ! git diff --staged --quiet; then
              git commit -m "Log: Prices.xlsx received."
          else
              echo "No new log entry commit."
          fi
          git push --force-with-lease || echo "Log push failed, might be merged by another push."
EOF

          # Workflow 4: on_scanning_upload.yml
          cat << 'EOF' > .github/workflows/on_scanning_upload.yml
# .github/workflows/on_scanning_upload.yml
name: On Scanning File Upload - Log Received

on:
  push:
    paths:
      - 'conversation/csv/scanning.xlsx'

jobs:
  log_received:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Cache Python dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install Required Python Packages
        run: pip install -r requirements.txt

      - name: Log Scanning.xlsx File Received
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          mkdir -p conversation/Logs
          LOG_FILE="conversation/Logs/workflow_activity.log"
          echo "$(date +"%Y-%m-%d %H:%M:%S") - Scanning.xlsx file received." >> "$LOG_FILE"
          git config user.name "github-actions"
          git config user.email "actions@github.com"
          git add "$LOG_FILE"
          git pull --rebase origin main || true
          
          if ! git diff --staged --quiet; then
              git commit -m "Log: Scanning.xlsx received."
          else
              echo "No new log entry commit."
          fi
          git push --force-with-lease || echo "Log push failed, might be merged by another push."
EOF
          echo "$(date +"%Y-%m-%d %H:%M:%S") - All workflow files created." >> setup_log.txt

      - name: Commit and Push All Setup Files
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config user.name "github-actions"
          git config user.email "actions@github.com"
          
          # Add all created folders, files, and initial log
          git add conversation/
          git add requirements.txt
          git add .github/workflows/
          git add setup_log.txt
          
          if git diff --staged --quiet; then
              echo "No changes to commit from setup."
          else
              git commit -m "Repository Setup: Initialized folders, requirements.txt, and workflow files."
          fi
          
          # Use --force as this is a setup commit and might overwrite empty repo state
          git push --force
          echo "$(date +"%Y-%m-%d %H:%M:%S") - Repository setup complete and pushed." >> setup_log.txt
